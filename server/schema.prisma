// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
  extensions        = [pg_trgm]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

model DiscordScheduledMessage {
  id                String    @id @default(cuid())
  message           String    @default("")
  guildId           String    @default("")
  channelId         String    @default("")
  unixExecutionTime BigInt
  createdAt         DateTime? @default(now())

  @@index([guildId])
  @@index([channelId])
}

model Judgement {
  id                          String   @id @default(cuid())
  conceptCaliber              Int
  implementationAttempt       Int
  demonstrationAbility        Int
  presentationProfessionalism Int
  overallScore                Float
  applicableTracks            Track[]  @relation("Judgement_applicableTracks")
  disqualifyReason            String   @default("")
  disqualifiedBy              User?    @relation("Judgement_disqualifiedBy", fields: [disqualifiedById], references: [id])
  disqualifiedById            String?  @map("disqualifiedBy")
  judge                       User?    @relation("Judgement_judge", fields: [judgeId], references: [id])
  judgeId                     String?  @map("judge")
  project                     Project? @relation("Judgement_project", fields: [projectId], references: [id])
  projectId                   String?  @map("project")
  judgeProjectCompoundKey     String   @unique @default("")

  @@index([disqualifiedById])
  @@index([judgeId])
  @@index([projectId])
}

model Project {
  id           String      @id @default(cuid())
  url          String      @unique @default("")
  name         String      @default("")
  judgingGroup Int
  year         Int
  judgements   Judgement[] @relation("Judgement_project")
}

model Registrant {
  id                               String    @id @default(cuid())
  firstName                        String    @default("")
  lastName                         String    @default("")
  email                            String    @default("")
  age                              Int
  gender                           String
  ethnicity                        String
  phoneNumber                      String    @default("")
  school                           School?   @relation("Registrant_school", fields: [schoolId], references: [id])
  schoolId                         String?   @map("school")
  major                            String    @default("")
  degree                           String
  country                          String    @default("")
  expectedGraduationYear           Int
  resume_filesize                  Int?
  resume_filename                  String?
  hackathonsAttended               Int?
  notes                            String    @default("")
  participationPreference          String    @default("")
  tshirtSize                       String    @default("")
  foodSuggestions                  String    @default("")
  foodAllergy                      String    @default("")
  makeucCodeOfConduct              Boolean   @default(false)
  makeucHackathonRules             Boolean   @default(false)
  makeucLiabilityRelease           Boolean   @default(false)
  acceptAllAuthorization           Boolean   @default(false)
  mlhCodeOfConductAgreement        Boolean   @default(false)
  mlhPrivacyPolicyAgreement        Boolean   @default(false)
  mlhEmailAgreement                Boolean   @default(false)
  registrationYear                 Int?      @default(2025)
  createdAt                        DateTime? @default(now())
  verified                         Boolean   @default(false)
  discordVerified                  Boolean   @default(false)
  acceptPhotoRelease               Boolean   @default(false)
  invitedInPerson                  Boolean   @default(false)
  user                             User?     @relation("Registrant_user", fields: [userId], references: [id])
  userId                           String?   @map("user")
  emailRegistrationYearCompoundKey String    @unique @default("")

  @@index([email])
  @@index([schoolId])
  @@index([registrationYear])
  @@index([userId])
}

model School {
  id                     String       @id @default(cuid())
  name                   String       @unique @default("")
  city                   String       @default("")
  state                  String       @default("")
  county                 String       @default("")
  country                String       @default("")
  alias                  String       @default("")
  createdAt              DateTime?    @default(now())
  from_Registrant_school Registrant[] @relation("Registrant_school")

  @@index([city])
  @@index([state])
  @@index([county])
  @@index([country])
  @@index([alias])
}

model Track {
  id         String      @id @default(cuid())
  name       String      @unique @default("")
  judgements Judgement[] @relation("Judgement_applicableTracks")
}

model User {
  id                                String                    @id @default(cuid())
  name                              String                    @default("")
  email                             String                    @unique @default("")
  createdAt                         DateTime?                 @default(now())
  roles                             Json                      @default("[\"default\"]")
  registrations                     Registrant[]              @relation("Registrant_user")
  judgements                        Judgement[]               @relation("Judgement_judge")
  from_Judgement_disqualifiedBy     Judgement[]               @relation("Judgement_disqualifiedBy")
  from_PassportStrategyStorage_user PassportStrategyStorage[] @relation("PassportStrategyStorage_user")
}

model PassportStrategyStorage {
  id                          String                                  @id @default(cuid())
  user                        User?                                   @relation("PassportStrategyStorage_user", fields: [userId], references: [id], onDelete: Cascade)
  userId                      String?                                 @map("user")
  strategyName                PassportStrategyStorageStrategyNameType
  data                        String                                  @default("")
  strategyNameDataCompoundKey String                                  @unique @default("")

  @@index([userId])
  @@index([strategyName])
  @@index([data])
}

enum PassportStrategyStorageStrategyNameType {
  google
  microsoft
}
