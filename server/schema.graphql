# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type DiscordScheduledMessage {
  id: ID!
  message: String
  guildId: String
  channelId: String
  unixExecutionTime: BigInt
  createdAt: DateTime
}

scalar BigInt

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input DiscordScheduledMessageWhereUniqueInput {
  id: ID
}

input DiscordScheduledMessageWhereInput {
  AND: [DiscordScheduledMessageWhereInput!]
  OR: [DiscordScheduledMessageWhereInput!]
  NOT: [DiscordScheduledMessageWhereInput!]
  id: IDFilter
  message: StringFilter
  guildId: StringFilter
  channelId: StringFilter
  unixExecutionTime: BigIntFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BigIntFilter {
  equals: BigInt
  in: [BigInt!]
  notIn: [BigInt!]
  lt: BigInt
  lte: BigInt
  gt: BigInt
  gte: BigInt
  not: BigIntFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input DiscordScheduledMessageOrderByInput {
  id: OrderDirection
  message: OrderDirection
  guildId: OrderDirection
  channelId: OrderDirection
  unixExecutionTime: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input DiscordScheduledMessageUpdateInput {
  message: String
  guildId: String
  channelId: String
  unixExecutionTime: BigInt
  createdAt: DateTime
}

input DiscordScheduledMessageUpdateArgs {
  where: DiscordScheduledMessageWhereUniqueInput!
  data: DiscordScheduledMessageUpdateInput!
}

input DiscordScheduledMessageCreateInput {
  message: String
  guildId: String
  channelId: String
  unixExecutionTime: BigInt
  createdAt: DateTime
}

type Judgement {
  id: ID!
  conceptCaliber: Int
  implementationAttempt: Int
  demonstrationAbility: Int
  presentationProfessionalism: Int
  overallScore: Float
  applicableTracks(where: TrackWhereInput! = {}, orderBy: [TrackOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TrackWhereUniqueInput): [Track!]
  applicableTracksCount(where: TrackWhereInput! = {}): Int
  disqualifyReason: String
  disqualifiedBy: User
  judge: User
  project: Project
  judgeProjectCompoundKey: String
}

input JudgementWhereUniqueInput {
  id: ID
  judgeProjectCompoundKey: String
}

input JudgementWhereInput {
  AND: [JudgementWhereInput!]
  OR: [JudgementWhereInput!]
  NOT: [JudgementWhereInput!]
  id: IDFilter
  conceptCaliber: IntFilter
  implementationAttempt: IntFilter
  demonstrationAbility: IntFilter
  presentationProfessionalism: IntFilter
  overallScore: FloatFilter
  applicableTracks: TrackManyRelationFilter
  disqualifyReason: StringFilter
  disqualifiedBy: UserWhereInput
  judge: UserWhereInput
  project: ProjectWhereInput
  judgeProjectCompoundKey: StringFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatFilter
}

input TrackManyRelationFilter {
  every: TrackWhereInput
  some: TrackWhereInput
  none: TrackWhereInput
}

input JudgementOrderByInput {
  id: OrderDirection
  conceptCaliber: OrderDirection
  implementationAttempt: OrderDirection
  demonstrationAbility: OrderDirection
  presentationProfessionalism: OrderDirection
  overallScore: OrderDirection
  disqualifyReason: OrderDirection
  judgeProjectCompoundKey: OrderDirection
}

input JudgementUpdateInput {
  conceptCaliber: Int
  implementationAttempt: Int
  demonstrationAbility: Int
  presentationProfessionalism: Int
  overallScore: Float
  applicableTracks: TrackRelateToManyForUpdateInput
  disqualifyReason: String
  disqualifiedBy: UserRelateToOneForUpdateInput
  judge: UserRelateToOneForUpdateInput
  project: ProjectRelateToOneForUpdateInput
}

input TrackRelateToManyForUpdateInput {
  disconnect: [TrackWhereUniqueInput!]
  set: [TrackWhereUniqueInput!]
  create: [TrackCreateInput!]
  connect: [TrackWhereUniqueInput!]
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input ProjectRelateToOneForUpdateInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
  disconnect: Boolean
}

input JudgementUpdateArgs {
  where: JudgementWhereUniqueInput!
  data: JudgementUpdateInput!
}

input JudgementCreateInput {
  conceptCaliber: Int
  implementationAttempt: Int
  demonstrationAbility: Int
  presentationProfessionalism: Int
  overallScore: Float
  applicableTracks: TrackRelateToManyForCreateInput
  disqualifyReason: String
  disqualifiedBy: UserRelateToOneForCreateInput
  judge: UserRelateToOneForCreateInput
  project: ProjectRelateToOneForCreateInput
}

input TrackRelateToManyForCreateInput {
  create: [TrackCreateInput!]
  connect: [TrackWhereUniqueInput!]
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input ProjectRelateToOneForCreateInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
}

type Project {
  id: ID!
  url: String
  name: String
  judgingGroup: Int
  year: Int
  judgements(where: JudgementWhereInput! = {}, orderBy: [JudgementOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: JudgementWhereUniqueInput): [Judgement!]
  judgementsCount(where: JudgementWhereInput! = {}): Int
  countJudgements: Int
  score: Float
  disqualified: Boolean
}

input ProjectWhereUniqueInput {
  id: ID
  url: String
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  id: IDFilter
  url: StringFilter
  name: StringFilter
  judgingGroup: IntFilter
  year: IntFilter
  judgements: JudgementManyRelationFilter
}

input JudgementManyRelationFilter {
  every: JudgementWhereInput
  some: JudgementWhereInput
  none: JudgementWhereInput
}

input ProjectOrderByInput {
  id: OrderDirection
  url: OrderDirection
  name: OrderDirection
  judgingGroup: OrderDirection
  year: OrderDirection
}

input ProjectUpdateInput {
  url: String
  name: String
  judgingGroup: Int
  year: Int
}

input ProjectUpdateArgs {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateInput!
}

input ProjectCreateInput {
  url: String
  name: String
  judgingGroup: Int
  year: Int
}

type Registrant {
  id: ID!
  firstName: String
  lastName: String
  email: String
  age: Int
  gender: String
  ethnicity: String
  school: School
  major: String
  degree: String
  country: String
  expectedGraduationYear: Int
  resume: FileFieldOutput
  hackathonsAttended: Int
  notes: String
  mlhCodeOfConductAgreement: Boolean
  mlhPrivacyPolicyAgreement: Boolean
  mlhEmailAgreement: Boolean
  registrationYear: Int
  createdAt: DateTime
  verified: Boolean
  discordVerified: Boolean
  acceptPhotoRelease: Boolean
  invitedInPerson: Boolean
  user: User
  emailRegistrationYearCompoundKey: String
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

input RegistrantWhereUniqueInput {
  id: ID
  emailRegistrationYearCompoundKey: String
}

input RegistrantWhereInput {
  AND: [RegistrantWhereInput!]
  OR: [RegistrantWhereInput!]
  NOT: [RegistrantWhereInput!]
  id: IDFilter
  firstName: StringFilter
  lastName: StringFilter
  email: StringFilter
  age: IntFilter
  gender: StringFilter
  ethnicity: StringFilter
  school: SchoolWhereInput
  major: StringFilter
  degree: StringFilter
  country: StringFilter
  expectedGraduationYear: IntFilter
  hackathonsAttended: IntNullableFilter
  notes: StringFilter
  mlhCodeOfConductAgreement: BooleanFilter
  mlhPrivacyPolicyAgreement: BooleanFilter
  mlhEmailAgreement: BooleanFilter
  registrationYear: IntNullableFilter
  createdAt: DateTimeNullableFilter
  verified: BooleanFilter
  discordVerified: BooleanFilter
  acceptPhotoRelease: BooleanFilter
  invitedInPerson: BooleanFilter
  user: UserWhereInput
  emailRegistrationYearCompoundKey: StringFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input RegistrantOrderByInput {
  id: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  email: OrderDirection
  age: OrderDirection
  gender: OrderDirection
  ethnicity: OrderDirection
  major: OrderDirection
  degree: OrderDirection
  country: OrderDirection
  expectedGraduationYear: OrderDirection
  hackathonsAttended: OrderDirection
  notes: OrderDirection
  mlhCodeOfConductAgreement: OrderDirection
  mlhPrivacyPolicyAgreement: OrderDirection
  mlhEmailAgreement: OrderDirection
  registrationYear: OrderDirection
  createdAt: OrderDirection
  verified: OrderDirection
  discordVerified: OrderDirection
  acceptPhotoRelease: OrderDirection
  invitedInPerson: OrderDirection
  emailRegistrationYearCompoundKey: OrderDirection
}

input RegistrantUpdateInput {
  firstName: String
  lastName: String
  email: String
  age: Int
  gender: String
  ethnicity: String
  school: SchoolRelateToOneForUpdateInput
  major: String
  degree: String
  country: String
  expectedGraduationYear: Int
  resume: FileFieldInput
  hackathonsAttended: Int
  notes: String
  mlhCodeOfConductAgreement: Boolean
  mlhPrivacyPolicyAgreement: Boolean
  mlhEmailAgreement: Boolean
  createdAt: DateTime
  user: UserRelateToOneForUpdateInput
}

input SchoolRelateToOneForUpdateInput {
  create: SchoolCreateInput
  connect: SchoolWhereUniqueInput
  disconnect: Boolean
}

input FileFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input RegistrantUpdateArgs {
  where: RegistrantWhereUniqueInput!
  data: RegistrantUpdateInput!
}

input RegistrantCreateInput {
  firstName: String
  lastName: String
  email: String
  age: Int
  gender: String
  ethnicity: String
  school: SchoolRelateToOneForCreateInput
  major: String
  degree: String
  country: String
  expectedGraduationYear: Int
  resume: FileFieldInput
  hackathonsAttended: Int
  notes: String
  mlhCodeOfConductAgreement: Boolean
  mlhPrivacyPolicyAgreement: Boolean
  mlhEmailAgreement: Boolean
  createdAt: DateTime
  user: UserRelateToOneForCreateInput
}

input SchoolRelateToOneForCreateInput {
  create: SchoolCreateInput
  connect: SchoolWhereUniqueInput
}

type School {
  id: ID!
  name: String
  city: String
  state: String
  county: String
  country: String
  alias: String
  createdAt: DateTime
}

input SchoolWhereUniqueInput {
  id: ID
  name: String
}

input SchoolWhereInput {
  AND: [SchoolWhereInput!]
  OR: [SchoolWhereInput!]
  NOT: [SchoolWhereInput!]
  id: IDFilter
  name: StringFilter
  city: StringFilter
  state: StringFilter
  county: StringFilter
  country: StringFilter
  alias: StringFilter
  createdAt: DateTimeNullableFilter
}

input SchoolOrderByInput {
  id: OrderDirection
  name: OrderDirection
  city: OrderDirection
  state: OrderDirection
  county: OrderDirection
  country: OrderDirection
  alias: OrderDirection
  createdAt: OrderDirection
}

input SchoolUpdateInput {
  name: String
  city: String
  state: String
  county: String
  country: String
  alias: String
  createdAt: DateTime
}

input SchoolUpdateArgs {
  where: SchoolWhereUniqueInput!
  data: SchoolUpdateInput!
}

input SchoolCreateInput {
  name: String
  city: String
  state: String
  county: String
  country: String
  alias: String
  createdAt: DateTime
}

type Track {
  id: ID!
  name: String
  judgements(where: JudgementWhereInput! = {}, orderBy: [JudgementOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: JudgementWhereUniqueInput): [Judgement!]
  judgementsCount(where: JudgementWhereInput! = {}): Int
}

input TrackWhereUniqueInput {
  id: ID
  name: String
}

input TrackWhereInput {
  AND: [TrackWhereInput!]
  OR: [TrackWhereInput!]
  NOT: [TrackWhereInput!]
  id: IDFilter
  name: StringFilter
  judgements: JudgementManyRelationFilter
}

input TrackOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TrackUpdateInput {
  name: String
}

input TrackUpdateArgs {
  where: TrackWhereUniqueInput!
  data: TrackUpdateInput!
}

input TrackCreateInput {
  name: String
}

type User {
  id: ID!
  name: String
  email: String
  createdAt: DateTime
  roles: [UserRoleType!]
  registrations(where: RegistrantWhereInput! = {}, orderBy: [RegistrantOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RegistrantWhereUniqueInput): [Registrant!]
  registrationsCount(where: RegistrantWhereInput! = {}): Int
  judgements(where: JudgementWhereInput! = {}, orderBy: [JudgementOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: JudgementWhereUniqueInput): [Judgement!]
  judgementsCount(where: JudgementWhereInput! = {}): Int
}

enum UserRoleType {
  admin
  organizer
  judge
  default
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
  registrations: RegistrantManyRelationFilter
  judgements: JudgementManyRelationFilter
}

input RegistrantManyRelationFilter {
  every: RegistrantWhereInput
  some: RegistrantWhereInput
  none: RegistrantWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  createdAt: DateTime
  roles: [UserRoleType!]
  registrations: RegistrantRelateToManyForUpdateInput
  judgements: JudgementRelateToManyForUpdateInput
}

input RegistrantRelateToManyForUpdateInput {
  disconnect: [RegistrantWhereUniqueInput!]
  set: [RegistrantWhereUniqueInput!]
  create: [RegistrantCreateInput!]
  connect: [RegistrantWhereUniqueInput!]
}

input JudgementRelateToManyForUpdateInput {
  disconnect: [JudgementWhereUniqueInput!]
  set: [JudgementWhereUniqueInput!]
  create: [JudgementCreateInput!]
  connect: [JudgementWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  createdAt: DateTime
  roles: [UserRoleType!]
  registrations: RegistrantRelateToManyForCreateInput
  judgements: JudgementRelateToManyForCreateInput
}

input RegistrantRelateToManyForCreateInput {
  create: [RegistrantCreateInput!]
  connect: [RegistrantWhereUniqueInput!]
}

input JudgementRelateToManyForCreateInput {
  create: [JudgementCreateInput!]
  connect: [JudgementWhereUniqueInput!]
}

type PassportStrategyStorage {
  id: ID!
  user: User
  strategyName: PassportStrategyStorageStrategyNameType
  data: String
  strategyNameDataCompoundKey: String
}

enum PassportStrategyStorageStrategyNameType {
  google
  microsoft
}

input PassportStrategyStorageWhereUniqueInput {
  id: ID
  strategyNameDataCompoundKey: String
}

input PassportStrategyStorageWhereInput {
  AND: [PassportStrategyStorageWhereInput!]
  OR: [PassportStrategyStorageWhereInput!]
  NOT: [PassportStrategyStorageWhereInput!]
  id: IDFilter
  user: UserWhereInput
  strategyName: PassportStrategyStorageStrategyNameTypeNullableFilter
  data: StringFilter
  strategyNameDataCompoundKey: StringFilter
}

input PassportStrategyStorageStrategyNameTypeNullableFilter {
  equals: PassportStrategyStorageStrategyNameType
  in: [PassportStrategyStorageStrategyNameType!]
  notIn: [PassportStrategyStorageStrategyNameType!]
  not: PassportStrategyStorageStrategyNameTypeNullableFilter
}

input PassportStrategyStorageOrderByInput {
  id: OrderDirection
  strategyName: OrderDirection
  data: OrderDirection
  strategyNameDataCompoundKey: OrderDirection
}

input PassportStrategyStorageUpdateInput {
  user: UserRelateToOneForUpdateInput
  strategyName: PassportStrategyStorageStrategyNameType
  data: String
}

input PassportStrategyStorageUpdateArgs {
  where: PassportStrategyStorageWhereUniqueInput!
  data: PassportStrategyStorageUpdateInput!
}

input PassportStrategyStorageCreateInput {
  user: UserRelateToOneForCreateInput
  strategyName: PassportStrategyStorageStrategyNameType
  data: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createDiscordScheduledMessage(data: DiscordScheduledMessageCreateInput!): DiscordScheduledMessage
  createDiscordScheduledMessages(data: [DiscordScheduledMessageCreateInput!]!): [DiscordScheduledMessage]
  updateDiscordScheduledMessage(where: DiscordScheduledMessageWhereUniqueInput!, data: DiscordScheduledMessageUpdateInput!): DiscordScheduledMessage
  updateDiscordScheduledMessages(data: [DiscordScheduledMessageUpdateArgs!]!): [DiscordScheduledMessage]
  deleteDiscordScheduledMessage(where: DiscordScheduledMessageWhereUniqueInput!): DiscordScheduledMessage
  deleteDiscordScheduledMessages(where: [DiscordScheduledMessageWhereUniqueInput!]!): [DiscordScheduledMessage]
  createJudgement(data: JudgementCreateInput!): Judgement
  createJudgements(data: [JudgementCreateInput!]!): [Judgement]
  updateJudgement(where: JudgementWhereUniqueInput!, data: JudgementUpdateInput!): Judgement
  updateJudgements(data: [JudgementUpdateArgs!]!): [Judgement]
  deleteJudgement(where: JudgementWhereUniqueInput!): Judgement
  deleteJudgements(where: [JudgementWhereUniqueInput!]!): [Judgement]
  createProject(data: ProjectCreateInput!): Project
  createProjects(data: [ProjectCreateInput!]!): [Project]
  updateProject(where: ProjectWhereUniqueInput!, data: ProjectUpdateInput!): Project
  updateProjects(data: [ProjectUpdateArgs!]!): [Project]
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteProjects(where: [ProjectWhereUniqueInput!]!): [Project]
  createRegistrant(data: RegistrantCreateInput!): Registrant
  createRegistrants(data: [RegistrantCreateInput!]!): [Registrant]
  updateRegistrant(where: RegistrantWhereUniqueInput!, data: RegistrantUpdateInput!): Registrant
  updateRegistrants(data: [RegistrantUpdateArgs!]!): [Registrant]
  deleteRegistrant(where: RegistrantWhereUniqueInput!): Registrant
  deleteRegistrants(where: [RegistrantWhereUniqueInput!]!): [Registrant]
  createSchool(data: SchoolCreateInput!): School
  createSchools(data: [SchoolCreateInput!]!): [School]
  updateSchool(where: SchoolWhereUniqueInput!, data: SchoolUpdateInput!): School
  updateSchools(data: [SchoolUpdateArgs!]!): [School]
  deleteSchool(where: SchoolWhereUniqueInput!): School
  deleteSchools(where: [SchoolWhereUniqueInput!]!): [School]
  createTrack(data: TrackCreateInput!): Track
  createTracks(data: [TrackCreateInput!]!): [Track]
  updateTrack(where: TrackWhereUniqueInput!, data: TrackUpdateInput!): Track
  updateTracks(data: [TrackUpdateArgs!]!): [Track]
  deleteTrack(where: TrackWhereUniqueInput!): Track
  deleteTracks(where: [TrackWhereUniqueInput!]!): [Track]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPassportStrategyStorage(data: PassportStrategyStorageCreateInput!): PassportStrategyStorage
  createPassportStrategyStorages(data: [PassportStrategyStorageCreateInput!]!): [PassportStrategyStorage]
  updatePassportStrategyStorage(where: PassportStrategyStorageWhereUniqueInput!, data: PassportStrategyStorageUpdateInput!): PassportStrategyStorage
  updatePassportStrategyStorages(data: [PassportStrategyStorageUpdateArgs!]!): [PassportStrategyStorage]
  deletePassportStrategyStorage(where: PassportStrategyStorageWhereUniqueInput!): PassportStrategyStorage
  deletePassportStrategyStorages(where: [PassportStrategyStorageWhereUniqueInput!]!): [PassportStrategyStorage]
  endSession: Boolean!
  disqualifyProject(projectId: ID, reason: String): Judgement
  seedSchoolIndiaData: Boolean
  verifyRegistrant(id: ID!): Registrant
  resendVerificationEmails: [String]
  massSendRegistrantEmail(sendGridId: String!, where: RegistrantWhereInput, skip: Int, take: Int): [String]!
}

type Query {
  discordScheduledMessages(where: DiscordScheduledMessageWhereInput! = {}, orderBy: [DiscordScheduledMessageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DiscordScheduledMessageWhereUniqueInput): [DiscordScheduledMessage!]
  discordScheduledMessage(where: DiscordScheduledMessageWhereUniqueInput!): DiscordScheduledMessage
  discordScheduledMessagesCount(where: DiscordScheduledMessageWhereInput! = {}): Int
  judgements(where: JudgementWhereInput! = {}, orderBy: [JudgementOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: JudgementWhereUniqueInput): [Judgement!]
  judgement(where: JudgementWhereUniqueInput!): Judgement
  judgementsCount(where: JudgementWhereInput! = {}): Int
  projects(where: ProjectWhereInput! = {}, orderBy: [ProjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProjectWhereUniqueInput): [Project!]
  project(where: ProjectWhereUniqueInput!): Project
  projectsCount(where: ProjectWhereInput! = {}): Int
  registrants(where: RegistrantWhereInput! = {}, orderBy: [RegistrantOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RegistrantWhereUniqueInput): [Registrant!]
  registrant(where: RegistrantWhereUniqueInput!): Registrant
  registrantsCount(where: RegistrantWhereInput! = {}): Int
  schools(where: SchoolWhereInput! = {}, orderBy: [SchoolOrderByInput!]! = [], take: Int! = 50, skip: Int! = 0, cursor: SchoolWhereUniqueInput): [School!]
  school(where: SchoolWhereUniqueInput!): School
  schoolsCount(where: SchoolWhereInput! = {}): Int
  tracks(where: TrackWhereInput! = {}, orderBy: [TrackOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TrackWhereUniqueInput): [Track!]
  track(where: TrackWhereUniqueInput!): Track
  tracksCount(where: TrackWhereInput! = {}): Int
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int! = 50, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  passportStrategyStorages(where: PassportStrategyStorageWhereInput! = {}, orderBy: [PassportStrategyStorageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PassportStrategyStorageWhereUniqueInput): [PassportStrategyStorage!]
  passportStrategyStorage(where: PassportStrategyStorageWhereUniqueInput!): PassportStrategyStorage
  passportStrategyStoragesCount(where: PassportStrategyStorageWhereInput! = {}): Int
  keystone: KeystoneMeta!
  statistics(year: Int!): String
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
